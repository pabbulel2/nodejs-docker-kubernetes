# Docker

# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  displayName: 'Use Node.js'
  inputs:
    packageType: 'node'
    version: 'lts-alpine'

- script: |
    npm install
    npm run build
  displayName: 'Install and Build'

- task: Docker@2
  displayName: 'Build and Push Docker Image'
  inputs:
    command: 'buildAndPush'
    repository: $(DOCKER_REPOSITORY_NAME)
    Dockerfile: '**/Dockerfile'
    tags: |
      $(Build.SourceBranchName)
      latest
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)





# trigger:
# - master

# pool:
#   vmImage: 'ubuntu-latest'

# stages:
# - stage: Build
#   jobs:
#   - job: BuildDockerImage
#     displayName: Build Docker Image
#     steps:
#     - script: |
#        sudo apt-get install -y awscli
#       #  aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
#       #  aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
#       #  aws configure set region $(AWS_REGION)
#       #  aws s3 ls
#       displayName: 'Install and Configure AWS CLI'
    
#     - script: |
#        export AWS_SDK_LOAD_CONFIG=1
#       displayName: 'Set AWS_SDK_LOAD_CONFIG'

#     - task: Npm@1
#       inputs:
#        command: 'install'
#     - task: Docker@2
#       inputs:
#         repository: '$(DOCKER_REPOSITORY_NAME)'
#         command: 'build'
#         Dockerfile: '**/Dockerfile'
#         buildContext: '$(Build.SourcesDirectory)'

#     - task: ECRPushImage@1
#       inputs:
#         awsCredentials: 'ad-aws-lp'
#         regionName: '$(AWS_REGION)'
#         imageSource: 'imagename'
#         sourceImageName: '$(DOCKER_REPOSITORY_NAME)'
#         sourceImageTag: '$(Build.BuildId)'
#         repositoryName: '$(DOCKER_REPOSITORY_NAME)'
#         pushTag: '$(Build.BuildId)'
  
    # - task: CopyFiles@2
    #   inputs:
    #     SourceFolder: 'kubernetes'
    #     Contents: '**'
    #     TargetFolder: '$(Build.ArtifactStagingDirectory)'
    # - task: PublishBuildArtifacts@1
    #   inputs:
    #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    #     ArtifactName: 'drop'
    #     publishLocation: 'Container'
    # - task: KubernetesManifest@0
    #   displayName: Deploy
    #   inputs:
    #     kubernetesServiceConnection: eks-connection
    #     namespace: default
    #     manifests: |
    #       deployment.yml
    # - task: HelmDeploy@0
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceConnection: 'eks-connection'
    #     namespace: 'default'
    #     command: 'install'
    #     chartPath: ./Helm_Zed_app
    #     chartType: FilePath
    #     install: true
    #     chartName: 'Zedapp'
    #     chartVersion: '1.0'
        